# Name of the workflow
name: Test AugmentOS Cloud ☁️

# trigger
on:
  push:
    paths:
      - "cloud/**"
      - ".github/workflows/cloud.yml"

jobs:
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest
    env:
      # (Optional) Specify Node environment, could also set BUN_ENV if needed.
      NODE_ENV: development
      # If Bun version is to be pinned, we can specify it here.
      BUN_VERSION: # e.g. "1.2.0" or leave blank for latest
    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch only the last commit for efficiency
          fetch-depth: 1

      # 2. Set up Bun runtime on the CI runner
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION || 'latest' }}
      # ^ This installs Bun on the runner, allowing us to use the `bun` command

      # 3. Restore cached dependencies to speed up build if possible
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          # Path to Bun's global package cache on the runner
          path: ~/.bun/install/cache
          # Key includes OS and lockfile hash. If bun.lockb (lockfile) hasn't changed, cache hits.
          key: ${{ runner.os }}-bun-${{ hashFiles('cloud/bun.lockb') }}
          # In case of partial match, allow restore with just OS identifier (fallback).
          restore-keys: |
            ${{ runner.os }}-bun-
      # ^ Uses GitHub cache to store Bun's package cache for faster installs
      - name: Install Dependencies
        working-directory: cloud
        run: bun run setup-deps

      # 3. build other projects
      - name: Build all projects
        working-directory: cloud
        run: bun run build

      # ^ Installs NPM packages. Bun uses its lockfile to ensure deterministic installs.
      # If cache was restored, this will be fast as packages are already downloaded.

      # 5. Run linter to ensure code quality
      #- name: Lint code
      #  working-directory: cloud
      #  run: bun run lint
      # ^ Runs the lint script (assumes package.json has a "lint" script or use bunx directly for ESLint).
      # Linting is done before tests to fail fast on syntax/style issues&#8203;:contentReference[oaicite:17]{index=17}.

      # 6. Run tests to verify functionality
      - name: Run tests
        working-directory: cloud/packages/cloud
        run: bun run test
      # ^ Executes the test suite (e.g., via Jest, Bun's built-in test runner, or another framework).
      # If any tests fail, the job (and workflow) will fail, preventing deployment.

      # 7. (Optional) Build step for production
      #- name: Build project
      #  working-directory: cloud
      #  run: bun run build
      # ^ If the server requires a build (e.g., TypeScript compilation or bundling), do it here.
      # If not needed, this step can be removed or left as a no-op.

      # (Optional) You could add a step to upload build artifacts if you plan to use them in deploy job.
      # - name: Upload artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: augmentos_build
      #     path: cloud/**
